' =============================================
' Data Migration System (Celery & PostgreSQL)
' =============================================

''' <summary>
''' Project Overview:
''' - Asynchronously migrates data between PostgreSQL databases
''' - Uses Celery workers for parallel batch processing
''' - Redis as message broker
''' </summary>

Module SetupInstructions

    ''' <summary>
    ''' STEP 1: Build and start containers
    ''' </summary>
    Sub Main()
        ' Build Docker images
        Shell("docker-compose build")
        
        ' Start services in detached mode
        Shell("docker-compose up -d")
        
        ' Services initialized:
        ' - source_db (PostgreSQL source)
        ' - dest_db (PostgreSQL destination) 
        ' - redis (Message Broker)
        ' - worker (Celery workers)
        ' - scheduler (Batch scheduler)
    End Sub

End Module

' =============================================
' Debugging & Maintenance
' =============================================

''' <summary>
''' Check failed batches in source database
''' </summary>
Public Sub CheckFailedBatches()
    Const query As String = "SELECT * FROM batch_metadata WHERE status = 'failed';"
    ' Execute in PostgreSQL:
    ' docker exec -it source_db psql -U postgres -d sourcedb -c query
End Sub

''' <summary>
''' Retry failed batches manually
''' </summary>
Public Sub RetryBatches()
    ' Run retry script in worker container
    Shell("docker exec -it pythonproject-worker-1 python retry_retriable.py")
End Sub

' =============================================
' Common Commands
' =============================================

Public Class Commands
    ' View worker logs
    Public Const ViewLogs As String = "docker logs -f pythonproject-worker-1"
    
    ' Stop all services
    Public Const StopServices As String = "docker-compose down"
    
    ' Full cleanup
    Public Const Cleanup As String = "docker-compose down -v"
End Class
